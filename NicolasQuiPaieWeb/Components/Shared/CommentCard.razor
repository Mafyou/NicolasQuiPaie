@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="comment-card mb-3">
    <div class="d-flex">
        <!-- Avatar -->
        <div class="me-3">
            <i class="fas fa-user-circle fa-2x text-primary"></i>
        </div>
        
        <!-- Content -->
        <div class="flex-grow-1">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div>
                    <strong class="me-2">@Comment.User.DisplayName</strong>
                    <span class="nicolas-level-badge">@GetNicolasBadge(Comment.User.FiscalLevel)</span>
                    <small class="text-muted ms-2">
                        @Comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                    </small>
                </div>
                
                <!-- Actions -->
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                            type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" @onclick="LikeComment">
                                <i class="fas fa-heart me-2 @(userLikedComment ? "text-danger" : "")"></i>
                                @(userLikedComment ? "Ne plus aimer" : "J'aime")
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" @onclick="ToggleReplyForm">
                                <i class="fas fa-reply me-2"></i>Répondre
                            </button>
                        </li>
                        <AuthorizeView>
                            <Authorized>
                                @if (context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Comment.UserId)
                                {
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger">
                                            <i class="fas fa-trash me-2"></i>Supprimer
                                        </button>
                                    </li>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </ul>
                </div>
            </div>
            
            <!-- Comment Text -->
            <div class="comment-content mb-2">
                <p class="mb-0">@Comment.Content</p>
            </div>
            
            <!-- Footer -->
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center gap-3">
                    <!-- Likes -->
                    <button class="btn btn-sm btn-outline-danger @(userLikedComment ? "active" : "")" 
                            @onclick="LikeComment">
                        <i class="fas fa-heart me-1"></i>
                        @Comment.LikesCount
                    </button>
                    
                    <!-- Reply Button -->
                    <button class="btn btn-sm btn-outline-primary" @onclick="ToggleReplyForm">
                        <i class="fas fa-reply me-1"></i>
                        Répondre
                    </button>
                    
                    <!-- Replies Count -->
                    @if (Comment.Replies.Any())
                    {
                        <span class="text-muted">
                            <i class="fas fa-comments me-1"></i>
                            @Comment.Replies.Count() réponse(s)
                        </span>
                    }
                </div>
            </div>
            
            <!-- Reply Form -->
            @if (showReplyForm)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="mt-3 p-3 bg-light rounded">
                            <div class="mb-2">
                                <textarea class="form-control form-control-sm" 
                                        rows="2" 
                                        @bind="replyContent" 
                                        placeholder="Votre réponse..."></textarea>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary btn-sm" 
                                        @onclick="SubmitReply"
                                        disabled="@(isSubmittingReply || string.IsNullOrWhiteSpace(replyContent))">
                                    @if (isSubmittingReply)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    Répondre
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleReplyForm">
                                    Annuler
                                </button>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="mt-3">
                            <small class="text-muted">
                                <a href="/Identity/Account/Login">Connectez-vous</a> pour répondre à ce commentaire.
                            </small>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            }
            
            <!-- Replies -->
            @if (Comment.Replies.Any() && showReplies)
            {
                <div class="replies mt-3 ms-3 border-start ps-3">
                    @foreach (var reply in Comment.Replies.Where(r => !r.IsDeleted).OrderBy(r => r.CreatedAt))
                    {
                        <NicolasQuiPaieWeb.Components.Shared.CommentCard Comment="reply" IsReply="true" />
                    }
                </div>
            }
            
            <!-- Show/Hide Replies Toggle -->
            @if (Comment.Replies.Any() && !IsReply)
            {
                <button class="btn btn-sm btn-link text-primary p-0 mt-2" @onclick="ToggleReplies">
                    @if (showReplies)
                    {
                        <i class="fas fa-chevron-up me-1"></i>@GetHideRepliesText()
                    }
                    else
                    {
                        <i class="fas fa-chevron-down me-1"></i>@GetShowRepliesText()
                    }
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Comment Comment { get; set; } = null!;
    [Parameter] public bool IsReply { get; set; } = false;

    private bool userLikedComment = false;
    private bool showReplyForm = false;
    private bool showReplies = false;
    private string replyContent = "";
    private bool isSubmittingReply = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserLike();
    }

    private async Task CheckUserLike()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                userLikedComment = Comment.Likes.Any(l => l.UserId == userId);
            }
        }
    }

    private async Task LikeComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            // Redirect to login or show message
            return;
        }

        // This would need a CommentService implementation
        // For now, just toggle the UI state
        userLikedComment = !userLikedComment;
        Comment.LikesCount += userLikedComment ? 1 : -1;
        StateHasChanged();
    }

    private void ToggleReplyForm()
    {
        showReplyForm = !showReplyForm;
        if (!showReplyForm)
        {
            replyContent = "";
        }
    }

    private void ToggleReplies()
    {
        showReplies = !showReplies;
    }

    private async Task SubmitReply()
    {
        if (string.IsNullOrWhiteSpace(replyContent)) return;

        isSubmittingReply = true;
        
        // This would need a CommentService implementation
        // For now, just simulate the submission
        await Task.Delay(1000);
        
        replyContent = "";
        showReplyForm = false;
        isSubmittingReply = false;
        StateHasChanged();
    }

    private string GetNicolasBadge(FiscalLevel level)
    {
        return level switch
        {
            FiscalLevel.PetitNicolas => "?? Petit Nicolas",
            FiscalLevel.GrosNicolas => "?? Gros Nicolas",
            FiscalLevel.NicolasSupreme => "?? Nicolas Suprême",
            _ => "?? Petit Nicolas"
        };
    }

    private string GetHideRepliesText()
    {
        return "Masquer les réponses";
    }

    private string GetShowRepliesText()
    {
        return $"Voir les {Comment.Replies.Count()} réponse(s)";
    }
}