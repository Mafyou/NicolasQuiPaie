@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CommentService CommentService
@inject IJSRuntime JSRuntime

<div class="comment-card mb-3">
    <div class="d-flex">
        <!-- Avatar -->
        <div class="me-3">
            <i class="fas fa-user-circle fa-2x text-primary"></i>
        </div>
        
        <!-- Content -->
        <div class="flex-grow-1">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div>
                    <strong class="me-2">@Comment.UserDisplayName</strong>
                    <span class="nicolas-level-badge">@GetNicolasBadge(FiscalLevel.PetitNicolas)</span>
                    <small class="text-muted ms-2">
                        @Comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                    </small>
                </div>
                
                <!-- Actions -->
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                            type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" @onclick="LikeComment">
                                <i class="fas fa-heart me-2 @(userLikedComment ? "text-danger" : "")"></i>
                                @(userLikedComment ? "Ne plus aimer" : "J'aime")
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" @onclick="ToggleReplyForm">
                                <i class="fas fa-reply me-2"></i>Répondre
                            </button>
                        </li>
                        <AuthorizeView>
                            <Authorized>
                                @if (context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == Comment.UserId)
                                {
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" @onclick="DeleteComment">
                                            <i class="fas fa-trash me-2"></i>Supprimer
                                        </button>
                                    </li>
                                }
                            </Authorized>
                        </AuthorizeView>
                    </ul>
                </div>
            </div>
            
            <!-- Comment Text -->
            <div class="comment-content mb-2">
                <p class="mb-0">@Comment.Content</p>
            </div>
            
            <!-- Footer -->
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center gap-3">
                    <!-- Likes -->
                    <button class="btn btn-sm btn-outline-danger @(userLikedComment ? "active" : "")" 
                            @onclick="LikeComment"
                            disabled="@isLiking">
                        @if (isLiking)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        else
                        {
                            <i class="fas fa-heart me-1"></i>
                        }
                        @currentLikesCount
                    </button>
                    
                    <!-- Reply Button -->
                    <button class="btn btn-sm btn-outline-primary" @onclick="ToggleReplyForm">
                        <i class="fas fa-reply me-1"></i>
                        Répondre
                    </button>
                    
                    <!-- Replies Count -->
                    @if (Comment.Replies.Count > 0)
                    {
                        <span class="text-muted">
                            <i class="fas fa-comments me-1"></i>
                            @Comment.Replies.Count réponse(s)
                        </span>
                    }
                </div>
            </div>
            
            <!-- Reply Form -->
            @if (showReplyForm)
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="mt-3 p-3 bg-light rounded">
                            <div class="mb-2">
                                <textarea class="form-control form-control-sm" 
                                        rows="2" 
                                        @bind="replyContent" 
                                        placeholder="Votre réponse..."></textarea>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary btn-sm" 
                                        @onclick="SubmitReply"
                                        disabled="@(isSubmittingReply || string.IsNullOrWhiteSpace(replyContent))">
                                    @if (isSubmittingReply)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    Répondre
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleReplyForm">
                                    Annuler
                                </button>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="mt-3">
                            <small class="text-muted">
                                <a href="/login">Connectez-vous</a> pour répondre à ce commentaire.
                            </small>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            }
            
            <!-- Nested Replies -->
            @if (Comment.Replies.Count > 0)
            {
                <div class="mt-3 ps-3 border-start">
                    @foreach (var reply in Comment.Replies)
                    {
                        <CommentCard Comment="reply" IsReply="true" OnCommentChanged="OnCommentChanged" />
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public CommentDto Comment { get; set; } = null!;
    [Parameter] public bool IsReply { get; set; } = false;
    [Parameter] public EventCallback<CommentDto> OnCommentChanged { get; set; }

    private bool userLikedComment = false;
    private bool showReplyForm = false;
    private string replyContent = "";
    private bool isSubmittingReply = false;
    private bool isLiking = false;
    private int currentLikesCount;

    protected override async Task OnInitializedAsync()
    {
        currentLikesCount = Comment.LikesCount;
        await CheckUserLike();
    }

    protected override void OnParametersSet()
    {
        currentLikesCount = Comment.LikesCount;
    }

    private async Task CheckUserLike()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                // TODO: Check if user liked comment via API when implemented
                userLikedComment = false; // Placeholder
            }
        }
    }

    private async Task LikeComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vous devez être connecté pour aimer un commentaire");
            return;
        }

        isLiking = true;
        StateHasChanged();

        try
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                // TODO: Call API to like/unlike comment when endpoints are available
                // For now, simulate the API call and update local state
                await Task.Delay(500); // Simulate network delay
                
                var wasLiked = userLikedComment;
                userLikedComment = !userLikedComment;
                currentLikesCount += userLikedComment ? 1 : -1;
                
                // Ensure likes count doesn't go below 0
                currentLikesCount = Math.Max(0, currentLikesCount);
                
                // TODO: Replace with actual API call
                // var updatedComment = userLikedComment 
                //     ? await CommentService.LikeCommentAsync(Comment.Id, userId)
                //     : await CommentService.UnlikeCommentAsync(Comment.Id, userId);
                // 
                // if (updatedComment is not null)
                // {
                //     await OnCommentChanged.InvokeAsync(updatedComment);
                // }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de l'action: {ex.Message}");
            // Revert state on error
            userLikedComment = !userLikedComment;
            currentLikesCount += userLikedComment ? 1 : -1;
            currentLikesCount = Math.Max(0, currentLikesCount);
        }
        finally
        {
            isLiking = false;
            StateHasChanged();
        }
    }

    private void ToggleReplyForm()
    {
        showReplyForm = !showReplyForm;
        if (!showReplyForm)
        {
            replyContent = "";
        }
    }

    private async Task SubmitReply()
    {
        if (string.IsNullOrWhiteSpace(replyContent)) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vous devez être connecté pour répondre");
            return;
        }

        isSubmittingReply = true;
        StateHasChanged();

        try
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var createReplyDto = new CreateCommentDto
                {
                    Content = replyContent.Trim(),
                    ProposalId = Comment.ProposalId,
                    ParentCommentId = Comment.Id
                };

                var newReply = await CommentService.CreateCommentAsync(createReplyDto);
                
                if (newReply is not null)
                {
                    // Create updated comment with new reply
                    var updatedReplies = Comment.Replies.Append(newReply).ToList();
                    var updatedComment = Comment with { Replies = updatedReplies };
                    
                    await OnCommentChanged.InvokeAsync(updatedComment);
                    
                    replyContent = "";
                    showReplyForm = false;
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la création de la réponse");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la soumission: {ex.Message}");
        }
        finally
        {
            isSubmittingReply = false;
            StateHasChanged();
        }
    }

    private async Task DeleteComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true) return;

        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId != Comment.UserId) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce commentaire ?");
        if (!confirmed) return;

        try
        {
            var success = await CommentService.DeleteCommentAsync(Comment.Id);
            if (success)
            {
                // Create updated comment marked as deleted
                var deletedComment = Comment with { IsDeleted = true };
                await OnCommentChanged.InvokeAsync(deletedComment);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la suppression du commentaire");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la suppression: {ex.Message}");
        }
    }

    private static string GetNicolasBadge(FiscalLevel level) => level switch
    {
        FiscalLevel.PetitNicolas => "??? Petit Nicolas",
        FiscalLevel.GrosMoyenNicolas => "?? Moyen Nicolas",
        FiscalLevel.GrosNicolas => "?? Gros Nicolas",
        FiscalLevel.NicolasSupreme => "?? Nicolas Suprême",
        _ => "??? Petit Nicolas"
    };
}