@using NicolasQuiPaieData.DTOs
@inject CommentService CommentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<div class="comment-card">
    @if (!Comment.IsDeleted)
    {
        <div class="d-flex align-items-start mb-3">
            <!-- User Avatar -->
            <div class="me-3">
                <div class="avatar-circle bg-primary text-white d-flex align-items-center justify-content-center"
                     style="width: 40px; height: 40px; border-radius: 50%;">
                    @(Comment.UserDisplayName?.FirstOrDefault().ToString().ToUpper() ?? "?")
                </div>
            </div>

            <!-- Comment Content -->
            <div class="flex-grow-1">
                <div class="comment-header d-flex align-items-center justify-content-between mb-2">
                    <div class="d-flex align-items-center">
                        <strong class="me-2">@Comment.UserDisplayName</strong>
                        <small class="text-muted">@Comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        @if (Comment.UpdatedAt.HasValue)
                        {
                            <small class="text-muted ms-2">(modifié)</small>
                        }
                    </div>
                    
                    <!-- Comment Actions -->
                    <AuthorizeView>
                        <Authorized>
                            @if (canUserEdit)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-h"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" @onclick="ToggleEditMode"><i class="fas fa-edit me-2"></i>Modifier</a></li>
                                        <li><a class="dropdown-item text-danger" href="#" @onclick="DeleteComment"><i class="fas fa-trash me-2"></i>Supprimer</a></li>
                                    </ul>
                                </div>
                            }
                        </Authorized>
                    </AuthorizeView>
                </div>

                <!-- Comment Text -->
                <div class="comment-content">
                    @if (isEditing)
                    {
                        <div class="mb-3">
                            <textarea class="form-control" @bind="editContent" rows="3" placeholder="Modifiez votre commentaire..."></textarea>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-primary me-2" @onclick="SaveEdit" disabled="@isSavingEdit">
                                    @if (isSavingEdit)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    Sauvegarder
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Annuler</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="mb-3">@Comment.Content</p>
                    }
                </div>

                <!-- Comment Actions Bar -->
                <div class="comment-actions d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="ToggleLike" disabled="@isTogglingLike">
                        @if (isTogglingLike)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        <i class="fas fa-heart me-1"></i>
                        @Comment.LikesCount
                    </button>
                    
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleReplyForm">
                                <i class="fas fa-reply me-1"></i>
                                Répondre
                            </button>
                        </Authorized>
                        <NotAuthorized>
                            <a href="/login" class="btn btn-sm btn-outline-secondary text-decoration-none">
                                <i class="fas fa-sign-in-alt me-1"></i>
                                Se connecter pour répondre
                            </a>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>

                <!-- Reply Form -->
                @if (showReplyForm)
                {
                    <div class="mt-3 p-3 bg-light rounded">
                        <div class="mb-3">
                            <textarea class="form-control" @bind="replyContent" rows="3" 
                                     placeholder="Écrivez votre réponse..."></textarea>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-sm btn-primary me-2" @onclick="SubmitReply" 
                                   disabled="@(isSubmittingReply || string.IsNullOrWhiteSpace(replyContent))">
                                @if (isSubmittingReply)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                Publier
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelReply">Annuler</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Replies -->
        @if (Comment.Replies.Any())
        {
            <div class="mt-3 ps-3 border-start">
                @foreach (var reply in Comment.Replies)
                {
                    <CommentCard Comment="reply" OnCommentChanged="OnCommentChanged" />
                }
            </div>
        }
    }
    else
    {
        <div class="text-muted fst-italic py-2">
            <i class="fas fa-trash me-2"></i>
            Ce commentaire a été supprimé.
        </div>
    }
</div>

@code {
    [Parameter] public CommentDto Comment { get; set; } = null!;
    [Parameter] public EventCallback<CommentDto> OnCommentChanged { get; set; }

    private bool isEditing = false;
    private bool isSavingEdit = false;
    private bool isTogglingLike = false;
    private bool showReplyForm = false;
    private bool isSubmittingReply = false;
    private bool canUserEdit = false;
    
    private string editContent = "";
    private string replyContent = "";

    protected override async Task OnInitializedAsync()
    {
        canUserEdit = await CanUserEditComment();
    }

    protected override void OnParametersSet()
    {
        editContent = Comment.Content;
    }

    private async Task<bool> CanUserEditComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true) return false;

        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        return userId == Comment.UserId;
    }

    private async Task SaveEdit()
    {
        if (string.IsNullOrWhiteSpace(editContent)) return;

        isSavingEdit = true;
        StateHasChanged();

        try
        {
            var updateDto = new UpdateCommentDto { Content = editContent.Trim() };
            var updatedComment = await CommentService.UpdateCommentAsync(Comment.Id, updateDto);
            if (updatedComment is not null)
            {
                await OnCommentChanged.InvokeAsync(updatedComment);
                isEditing = false;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la mise à jour du commentaire");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la sauvegarde: {ex.Message}");
        }
        finally
        {
            isSavingEdit = false;
            StateHasChanged();
        }
    }

    private async Task ToggleLike()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vous devez être connecté pour aimer un commentaire");
            return;
        }

        isTogglingLike = true;
        StateHasChanged();

        try
        {
            // TODO: Implement like/unlike functionality when API endpoint is available
            // For now, just simulate the action
            await Task.Delay(500); // Simulate API call
            
            // Create updated comment with incremented likes
            var updatedComment = Comment with 
            { 
                LikesCount = Comment.LikesCount + 1
            };
            
            await OnCommentChanged.InvokeAsync(updatedComment);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du like: {ex.Message}");
        }
        finally
        {
            isTogglingLike = false;
            StateHasChanged();
        }
    }

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
        if (isEditing)
        {
            editContent = Comment.Content;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editContent = Comment.Content;
    }

    private void ToggleReplyForm()
    {
        showReplyForm = !showReplyForm;
        if (!showReplyForm)
        {
            replyContent = "";
        }
    }

    private void CancelReply()
    {
        showReplyForm = false;
        replyContent = "";
    }

    private async Task SubmitReply()
    {
        if (string.IsNullOrWhiteSpace(replyContent)) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vous devez être connecté pour répondre");
            return;
        }

        isSubmittingReply = true;
        StateHasChanged();

        try
        {
            var createReplyDto = new CreateCommentDto
            {
                Content = replyContent.Trim(),
                ProposalId = Comment.ProposalId,
                ParentCommentId = Comment.Id
            };

            var newReply = await CommentService.CreateCommentAsync(createReplyDto);
            
            if (newReply is not null)
            {
                // Create updated comment with new reply
                var updatedReplies = Comment.Replies.Append(newReply).ToList();
                var updatedComment = Comment with { Replies = updatedReplies };
                
                await OnCommentChanged.InvokeAsync(updatedComment);
                
                replyContent = "";
                showReplyForm = false;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la création de la réponse");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la soumission: {ex.Message}");
        }
        finally
        {
            isSubmittingReply = false;
            StateHasChanged();
        }
    }

    private async Task DeleteComment()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true) return;

        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (userId != Comment.UserId) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce commentaire ?");
        if (!confirmed) return;

        try
        {
            var success = await CommentService.DeleteCommentAsync(Comment.Id);
            if (success)
            {
                // Create updated comment marked as deleted
                var deletedComment = Comment with { IsDeleted = true };
                await OnCommentChanged.InvokeAsync(deletedComment);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Erreur lors de la suppression du commentaire");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors de la suppression: {ex.Message}");
        }
    }
}