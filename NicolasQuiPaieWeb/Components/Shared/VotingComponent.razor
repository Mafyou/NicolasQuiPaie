@inject VotingService VotingService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="voting-component">
    <!-- Main Voting Buttons -->
    <div class="row g-3 mb-4">
        <div class="col-md-6">
            <div class="voting-option voting-for @(userVote?.VoteType == VoteType.For ? "selected" : "")">
                <button class="btn btn-success btn-lg w-100 position-relative"
                        @onclick="() => CastVote(VoteType.For)"
                        disabled="@isVoting">
                    @if (isVoting && pendingVoteType == VoteType.For)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="fas fa-thumbs-up me-2"></i>
                    <strong>Nicolas Approuve</strong>
                    
                    <div class="vote-count-overlay">
                        <span class="badge bg-light text-dark position-absolute top-0 end-0 mt-2 me-2">
                            @Proposal.VotesFor
                        </span>
                    </div>
                </button>
                
                <div class="progress mt-2" style="height: 8px;">
                    <div class="progress-bar bg-success" 
                         style="width: @(forPercentage)%"
                         data-percentage="@Math.Round(forPercentage, 1)"></div>
                </div>
                
                <div class="text-center mt-2">
                    <strong class="text-success">@Math.Round(forPercentage, 1)%</strong>
                    <small class="text-muted">(@Proposal.VotesFor votes)</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="voting-option voting-against @(userVote?.VoteType == VoteType.Against ? "selected" : "")">
                <button class="btn btn-danger btn-lg w-100 position-relative"
                        @onclick="() => CastVote(VoteType.Against)"
                        disabled="@isVoting">
                    @if (isVoting && pendingVoteType == VoteType.Against)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    <i class="fas fa-thumbs-down me-2"></i>
                    <strong>Nicolas Refuse</strong>
                    
                    <div class="vote-count-overlay">
                        <span class="badge bg-light text-dark position-absolute top-0 end-0 mt-2 me-2">
                            @Proposal.VotesAgainst
                        </span>
                    </div>
                </button>
                
                <div class="progress mt-2" style="height: 8px;">
                    <div class="progress-bar bg-danger" 
                         style="width: @(againstPercentage)%"
                         data-percentage="@Math.Round(againstPercentage, 1)"></div>
                </div>
                
                <div class="text-center mt-2">
                    <strong class="text-danger">@Math.Round(againstPercentage, 1)%</strong>
                    <small class="text-muted">(@Proposal.VotesAgainst votes)</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Voting Statistics -->
    <div class="card border-0 bg-light">
        <div class="card-body">
            <div class="row text-center">
                <div class="col-md-3">
                    <div class="stat-item">
                        <h4 class="text-primary mb-1">@Proposal.TotalVotes</h4>
                        <small class="text-muted">Total Votes</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <h4 class="text-info mb-1">@Proposal.ViewsCount</h4>
                        <small class="text-muted">Vues</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <h4 class="text-warning mb-1">@Math.Round(Proposal.ApprovalRate, 1)%</h4>
                        <small class="text-muted">Approbation</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-item">
                        <h4 class="text-secondary mb-1">@GetCurrentNicolasLevel()</h4>
                        <small class="text-muted">Votre Badge</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Notification -->
    @if (showVoteNotification)
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            Votre vote a été pris en compte ! Votre badge actuel : <strong>@GetCurrentNicolasLevel()</strong>
            <button type="button" class="btn-close" @onclick="() => showVoteNotification = false"></button>
        </div>
    }

    <!-- Badge Information -->
    <AuthorizeView>
        <Authorized>
            <div class="mt-3">
                <div class="card border-info bg-info bg-opacity-10">
                    <div class="card-body p-3">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-medal text-info fa-2x me-3"></i>
                            <div>
                                <h6 class="mb-1">🏅 Système de Badges Nicolas</h6>
                                <small class="text-muted">
                                    Votre badge <strong>@GetCurrentNicolasLevel()</strong> reflète votre niveau de contribution.
                                    <br>
                                    <span class="text-primary">Chaque vote compte égal : 1 vote = 1 voix ! Les badges montrent votre engagement.</span>
                                </small>
                                <div class="mt-2">
                                    <a href="/help/voting-system" class="btn btn-sm btn-outline-info">
                                        <i class="fas fa-info-circle me-1"></i>En savoir plus
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="mt-3">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <a href="/Identity/Account/Login" class="text-decoration-none">Connectez-vous</a> pour participer et obtenir votre badge Nicolas !
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter] public Proposal Proposal { get; set; } = null!;
    [Parameter] public EventCallback<Vote> OnVoteChanged { get; set; }

    private Vote? userVote;
    private ApplicationUser? currentUser;
    private bool isVoting = false;
    private VoteType? pendingVoteType;
    private bool showVoteNotification = false;
    private IJSObjectReference? signalRConnection;
    
    private double forPercentage => Proposal.TotalVotes > 0 ? (double)Proposal.VotesFor / Proposal.TotalVotes * 100 : 0;
    private double againstPercentage => 100 - forPercentage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadUserVote();
        await SetupSignalR();
    }

    private async Task LoadCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                currentUser = await UserManager.FindByIdAsync(userId);
            }
        }
    }

    private async Task LoadUserVote()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                userVote = await VotingService.GetUserVoteAsync(userId, Proposal.Id);
            }
        }
    }

    private async Task SetupSignalR()
    {
        try
        {
            signalRConnection = await JSRuntime.InvokeAsync<IJSObjectReference>("setupVotingSignalR", Proposal.Id);
        }
        catch (Exception)
        {
            // SignalR setup failed, continue without real-time updates
        }
    }

    private async Task CastVote(VoteType voteType)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vous devez être connecté pour voter");
            return;
        }

        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId)) return;

        isVoting = true;
        pendingVoteType = voteType;

        try
        {
            var success = await VotingService.CastVoteAsync(userId, Proposal.Id, voteType);
            if (success)
            {
                await LoadUserVote();
                showVoteNotification = true;
                
                // Auto-hide notification after 5 seconds
                _ = Task.Delay(5000).ContinueWith(_ => 
                {
                    showVoteNotification = false;
                    InvokeAsync(StateHasChanged);
                });

                await OnVoteChanged.InvokeAsync(userVote);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erreur lors du vote: {ex.Message}");
        }
        finally
        {
            isVoting = false;
            pendingVoteType = null;
        }
    }

    private string GetCurrentNicolasLevel()
    {
        if (currentUser == null) return "🥉 Petit Nicolas";
        
        return currentUser.FiscalLevel switch
        {
            FiscalLevel.PetitNicolas => "🥉 Petit Nicolas",
            FiscalLevel.GrosNicolas => "🥈 Gros Nicolas",
            FiscalLevel.NicolasSupreme => "🏆 Nicolas Suprême",
            _ => "🥉 Petit Nicolas"
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (signalRConnection != null)
        {
            await signalRConnection.InvokeVoidAsync("dispose");
            await signalRConnection.DisposeAsync();
        }
    }
}