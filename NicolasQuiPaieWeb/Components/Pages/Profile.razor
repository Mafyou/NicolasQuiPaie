@page "/profile"
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject BadgeService BadgeService
@attribute [Authorize]

<PageTitle>Mon Profil - Nicolas Qui Paie</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-3 text-muted">Chargement de votre profil...</p>
        </div>
    }
    else if (currentUser != null)
    {
        <div class="row">
            <!-- Profile Header -->
            <div class="col-12 mb-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3 text-center">
                                <i class="fas fa-user-circle fa-5x text-primary mb-3"></i>
                                <h4 class="fw-bold">@currentUser.DisplayName</h4>
                                <div class="nicolas-level-badge-large">
                                    @GetNicolasBadge(currentUser.FiscalLevel)
                                </div>
                                <small class="text-muted">Membre depuis @currentUser.CreatedAt.ToString("dd/MM/yyyy")</small>
                            </div>
                            <div class="col-md-9">
                                <div class="row g-4">
                                    <div class="col-md-3">
                                        <div class="stat-card text-center">
                                            <h3 class="text-primary">@userStats.ProposalsCount</h3>
                                            <small class="text-muted">Propositions</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="stat-card text-center">
                                            <h3 class="text-success">@userStats.VotesCount</h3>
                                            <small class="text-muted">Votes</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="stat-card text-center">
                                            <h3 class="text-info">@userStats.CommentsCount</h3>
                                            <small class="text-muted">Commentaires</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="stat-card text-center">
                                            <h3 class="text-warning">@currentUser.ReputationScore</h3>
                                            <small class="text-muted">Réputation</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Content -->
            <div class="col-lg-8">
                <!-- Tab Navigation -->
                <ul class="nav nav-tabs mb-4" id="profileTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">
                            <i class="fas fa-user me-1"></i>Informations
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="badges-tab" data-bs-toggle="tab" data-bs-target="#badges" type="button" role="tab">
                            <i class="fas fa-medal me-1"></i>Badges
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="profileTabContent">
                    <!-- Info Tab -->
                    <div class="tab-pane fade show active" id="info" role="tabpanel">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <h5 class="fw-bold mb-3">Informations personnelles</h5>
                                
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Nom d'affichage</label>
                                        <input type="text" class="form-control" @bind="editDisplayName" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Email</label>
                                        <input type="email" class="form-control" value="@currentUser.Email" readonly />
                                        <small class="text-muted">Contact le support pour changer l'email</small>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Niveau Nicolas</label>
                                        <input type="text" class="form-control" value="@GetNicolasBadge(currentUser.FiscalLevel)" readonly />
                                        <small class="text-muted">Badge attribué automatiquement selon votre contribution</small>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Membre depuis</label>
                                        <input type="text" class="form-control" value="@currentUser.CreatedAt.ToString("dd/MM/yyyy")" readonly />
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label">Biographie</label>
                                        <textarea class="form-control" rows="3" @bind="editBio" placeholder="Parlez-nous de vous..." maxlength="500"></textarea>
                                        <small class="text-muted">@(editBio?.Length ?? 0)/500 caractères</small>
                                    </div>
                                </div>

                                <div class="mt-3">
                                    <button class="btn btn-primary" @onclick="UpdateProfile" disabled="@isUpdating">
                                        @if (isUpdating)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1"></span>
                                        }
                                        <i class="fas fa-save me-1"></i>Sauvegarder
                                    </button>
                                    @if (!string.IsNullOrEmpty(updateMessage))
                                    {
                                        <span class="ms-2 text-success">@updateMessage</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Badges Tab -->
                    <div class="tab-pane fade" id="badges" role="tabpanel">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body">
                                <h5 class="fw-bold mb-3">Système de Badges Nicolas</h5>
                                
                                <!-- Current Badge -->
                                <div class="alert alert-info mb-4">
                                    <div class="d-flex align-items-center">
                                        <div class="badge-icon me-3">@GetBadgeEmoji(currentUser.FiscalLevel)</div>
                                        <div>
                                            <h6 class="fw-bold mb-1">Votre badge actuel : @GetNicolasBadge(currentUser.FiscalLevel)</h6>
                                            <p class="mb-0">@BadgeService.GetBadgeDescription(currentUser.FiscalLevel)</p>
                                        </div>
                                    </div>
                                </div>

                                <!-- All Badges -->
                                <h6 class="fw-bold mb-3">Tous les badges Nicolas</h6>
                                <div class="row g-3">
                                    @foreach (FiscalLevel level in Enum.GetValues<FiscalLevel>())
                                    {
                                        <div class="col-md-4">
                                            <div class="card border @(currentUser.FiscalLevel == level ? "border-primary bg-primary bg-opacity-10" : "")">
                                                <div class="card-body text-center">
                                                    <div class="badge-icon-large mb-2">@GetBadgeEmoji(level)</div>
                                                    <h6 class="fw-bold">@GetNicolasBadge(level)</h6>
                                                    <small class="text-muted">@BadgeService.GetBadgeDescription(level)</small>
                                                    @if (currentUser.FiscalLevel == level)
                                                    {
                                                        <div class="mt-2">
                                                            <span class="badge bg-primary">Votre badge actuel</span>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4">
                <!-- Achievement Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-warning text-dark">
                        <h6 class="mb-0">
                            <i class="fas fa-trophy me-1"></i>Accomplissements
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="achievement-list">
                            @foreach (var achievement in GetUserAchievements())
                            {
                                <div class="achievement-item d-flex align-items-center mb-2">
                                    <span class="me-2">@achievement.Icon</span>
                                    <div>
                                        <div class="fw-bold">@achievement.Title</div>
                                        <small class="text-muted">@achievement.Description</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Activity Card -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">
                            <i class="fas fa-chart-line me-1"></i>Activité récente
                        </h6>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Dernière connexion : @(currentUser.CreatedAt > DateTime.UtcNow.AddDays(-1) ? "Aujourd'hui" : "Il y a quelques jours")</p>
                        <p class="text-muted">Actions cette semaine : @GetWeeklyActivity()</p>
                        <div class="mt-3">
                            <button class="btn btn-sm btn-outline-info" @onclick="RefreshBadge" disabled="@isRefreshingBadge">
                                @if (isRefreshingBadge)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="fas fa-sync-alt me-1"></i>Actualiser badge
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Error state -->
        <div class="text-center py-5">
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                <h4>Problème d'authentification</h4>
                <p>Impossible de charger votre profil. Veuillez vous reconnecter.</p>
                
                <div class="mt-4">
                    <a href="/login" class="btn btn-primary me-2">
                        <i class="fas fa-sign-in-alt me-1"></i>Se reconnecter
                    </a>
                    <button class="btn btn-outline-secondary" @onclick="RetryLoadProfile">
                        <i class="fas fa-redo me-1"></i>Réessayer
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // User information from JWT claims
    private UserDto? currentUser;
    private UserStatsDto userStats = new UserStatsDto();
    
    // Edit fields
    private string editDisplayName = "";
    private string editBio = "";
    
    // Component state
    private bool isLoading = true;
    private bool isUpdating = false;
    private bool isRefreshingBadge = false;
    private string updateMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task RetryLoadProfile()
    {
        currentUser = null;
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Extract user information from JWT claims
                currentUser = new UserDto
                {
                    Id = authState.User.FindFirst("sub")?.Value ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "",
                    Email = authState.User.FindFirst("email")?.Value ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
                    DisplayName = authState.User.FindFirst("DisplayName")?.Value ?? authState.User.Identity?.Name ?? "Nicolas",
                    FiscalLevel = Enum.TryParse<FiscalLevel>(authState.User.FindFirst("FiscalLevel")?.Value, out var level) ? level : FiscalLevel.PetitNicolas,
                    ReputationScore = int.TryParse(authState.User.FindFirst("ReputationScore")?.Value, out var score) ? score : 0,
                    IsVerified = bool.TryParse(authState.User.FindFirst("IsVerified")?.Value, out var verified) && verified,
                    CreatedAt = DateTime.TryParse(authState.User.FindFirst("CreatedAt")?.Value, out var created) ? created : DateTime.UtcNow
                };

                editDisplayName = currentUser.DisplayName ?? "";
                editBio = ""; // Will be loaded from API in future

                // Load user stats (placeholder for now - will be replaced with API calls)
                userStats = new UserStatsDto
                {
                    ProposalsCount = 0, // TODO: Load from API
                    VotesCount = 0,     // TODO: Load from API
                    CommentsCount = 0,  // TODO: Load from API
                    ReputationScore = currentUser.ReputationScore
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du profil: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateProfile()
    {
        if (currentUser == null) return;

        isUpdating = true;
        updateMessage = "";
        
        try
        {
            // TODO: Call API to update profile when endpoint is available
            // For now, update the record using 'with' expression
            currentUser = currentUser with { DisplayName = editDisplayName?.Trim() };
            
            updateMessage = "Profil mis à jour avec succès !";
            _ = Task.Delay(3000).ContinueWith(_ => 
            {
                updateMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour: {ex.Message}");
            updateMessage = "Erreur lors de la mise à jour du profil.";
        }
        finally
        {
            isUpdating = false;
            StateHasChanged();
        }
    }

    private async Task RefreshBadge()
    {
        if (currentUser == null) return;

        isRefreshingBadge = true;
        
        try
        {
            // TODO: Call API to refresh badge when endpoint is available
            updateMessage = "Badge actualisé !";
            
            _ = Task.Delay(3000).ContinueWith(_ => 
            {
                updateMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour du badge: {ex.Message}");
            updateMessage = "Erreur lors de la mise à jour du badge.";
        }
        finally
        {
            isRefreshingBadge = false;
            StateHasChanged();
        }
    }

    // Helper methods
    private string GetNicolasBadge(FiscalLevel level)
    {
        return BadgeService.GetBadgeDisplayName(level);
    }

    private string GetBadgeEmoji(FiscalLevel level)
    {
        return level switch
        {
            FiscalLevel.PetitNicolas => "🥉",
            FiscalLevel.GrosMoyenNicolas => "🥈",
            FiscalLevel.GrosNicolas => "🥈",
            FiscalLevel.NicolasSupreme => "🏆",
            _ => "🥉"
        };
    }

    private List<AchievementDto> GetUserAchievements()
    {
        var achievements = new List<AchievementDto>();
        
        if (userStats.VotesCount > 0)
            achievements.Add(new AchievementDto { Icon = "🗳️", Title = "Premier Vote", Description = "Votre premier vote sur une proposition" });
            
        if (userStats.ProposalsCount > 0)
            achievements.Add(new AchievementDto { Icon = "💡", Title = "Créateur", Description = "Votre première proposition créée" });
            
        if (userStats.CommentsCount >= 10)
            achievements.Add(new AchievementDto { Icon = "💬", Title = "Commentateur", Description = "10 commentaires postés" });
            
        if (userStats.VotesCount >= 50)
            achievements.Add(new AchievementDto { Icon = "🎖️", Title = "Citoyen Actif", Description = "50 votes exprimés" });
            
        if ((currentUser?.CreatedAt.AddDays(30) ?? DateTime.MaxValue) < DateTime.UtcNow)
            achievements.Add(new AchievementDto { Icon = "🌟", Title = "Vétéran", Description = "Membre depuis plus d'un mois" });

        return achievements;
    }

    private int GetWeeklyActivity()
    {
        // TODO: Calculate from actual data when API is available
        return userStats.VotesCount + userStats.ProposalsCount;
    }
}