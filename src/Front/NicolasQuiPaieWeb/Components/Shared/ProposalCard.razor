@using NicolasQuiPaieData.DTOs
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject VotingService VotingService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ProposalService ProposalService

<div class="card proposal-card border-0 shadow-sm h-100">
    <div class="card-body">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-start mb-3">
            <div class="d-flex align-items-center">
                <span class="badge rounded-pill me-2" style="background-color: @Proposal.CategoryColor; color: white;">
                    <i class="@Proposal.CategoryIcon me-1"></i>
                    @Proposal.CategoryName
                </span>
                @if (Proposal.IsFeatured)
                {
                    <span class="badge bg-warning text-dark">
                        <i class="fas fa-star me-1"></i>Featured
                    </span>
                }
                @if (Proposal.IsHot)
                {
                    <span class="badge bg-danger ms-1">
                        <i class="fas fa-fire me-1"></i>Hot
                    </span>
                }
                <!-- Status Badge -->
                <span class="badge ms-1 @GetStatusBadgeClass(Proposal.Status)">
                    <i class="@GetStatusIcon(Proposal.Status) me-1"></i>@GetStatusText(Proposal.Status)
                </span>
            </div>
            <small class="text-muted">@Proposal.CreatedAt.ToString("dd/MM/yyyy")</small>
        </div>

        <!-- SuperUser/Admin Controls - C# 13.0 Role-based Authorization -->
        <AuthorizeView Roles="SuperUser,Admin">
            <Authorized>
                <div class="alert alert-info py-2 px-3 mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="mb-0">
                            <i class="fas fa-tools me-1"></i>
                            <strong>Contrôles SuperUser/Admin</strong>
                        </small>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                                    data-bs-toggle="dropdown" disabled="@isToggling">
                                @if (isToggling)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="fas fa-cog me-1"></i>Statut
                            </button>
                            <ul class="dropdown-menu">
                                <li><button class="dropdown-item" @onclick="() => ToggleStatus(ProposalStatus.Active)"
                                          disabled="@(Proposal.Status == ProposalStatus.Active || isToggling)">
                                    <i class="fas fa-play text-success me-2"></i>Activer
                                </button></li>
                                <li><button class="dropdown-item" @onclick="() => ToggleStatus(ProposalStatus.Closed)"
                                          disabled="@(Proposal.Status == ProposalStatus.Closed || isToggling)">
                                    <i class="fas fa-stop text-warning me-2"></i>Fermer
                                </button></li>
                                <li><button class="dropdown-item" @onclick="() => ToggleStatus(ProposalStatus.Archived)"
                                          disabled="@(Proposal.Status == ProposalStatus.Archived || isToggling)">
                                    <i class="fas fa-archive text-secondary me-2"></i>Archiver
                                </button></li>
                                <li><button class="dropdown-item" @onclick="() => ToggleStatus(ProposalStatus.Draft)"
                                          disabled="@(Proposal.Status == ProposalStatus.Draft || isToggling)">
                                    <i class="fas fa-edit text-info me-2"></i>Brouillon
                                </button></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>

        <!-- Title and Description -->
        <h5 class="card-title fw-bold mb-2">
            <a href="/proposal/@Proposal.Id" class="text-decoration-none text-dark">
                @Proposal.Title
            </a>
        </h5>
        
        <p class="card-text text-muted mb-3">
            @if (Proposal.Description.Length > 150)
            {
                @(Proposal.Description.Substring(0, 150) + "...")
            }
            else
            {
                @Proposal.Description
            }
        </p>

        <!-- Author -->
        <div class="d-flex align-items-center mb-3">
            <i class="fas fa-user-circle text-primary me-2"></i>
            <small class="text-muted">
                Par <strong>@Proposal.CreatedByDisplayName</strong>
                <span class="nicolas-level-badge ms-1">🥉 Petit Nicolas</span>
            </small>
        </div>

        <!-- Voting Section -->
        <div class="row g-2 mb-3">
            <div class="col-12">
                <!-- Progress Bar -->
                <div class="progress mb-2" style="height: 8px;">
                    @{
                        var forPercentage = Proposal.TotalVotes > 0 ? (double)Proposal.VotesFor / Proposal.TotalVotes * 100 : 0;
                        var againstPercentage = 100 - forPercentage;
                    }
                    <div class="progress-bar bg-success" style="width: @(forPercentage)%"></div>
                    <div class="progress-bar bg-danger" style="width: @(againstPercentage)%"></div>
                </div>

                <!-- Vote Counts -->
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <span class="text-success me-3">
                            <i class="fas fa-thumbs-up me-1"></i>
                            <strong>@Proposal.VotesFor</strong>
                        </span>
                        <span class="text-danger">
                            <i class="fas fa-thumbs-down me-1"></i>
                            <strong>@Proposal.VotesAgainst</strong>
                        </span>
                    </div>
                    <div class="text-muted">
                        <small>@Proposal.TotalVotes votes • @Proposal.ViewsCount vues</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        @if (ShowActions && Proposal.Status == ProposalStatus.Active)
        {
            <AuthorizeView>
                <Authorized>
                    <div class="row g-2">
                        <div class="col-6">
                            <button class="btn btn-outline-success w-100 @(userVote?.VoteType == VoteType.For ? "active" : "")"
                                    @onclick="() => CastVote(VoteType.For)"
                                    disabled="@isVoting">
                                @if (isVoting && pendingVoteType == VoteType.For)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="fas fa-thumbs-up me-1"></i>
                                Nicolas Approuve
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-outline-danger w-100 @(userVote?.VoteType == VoteType.Against ? "active" : "")"
                                    @onclick="() => CastVote(VoteType.Against)"
                                    disabled="@isVoting">
                                @if (isVoting && pendingVoteType == VoteType.Against)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="fas fa-thumbs-down me-1"></i>
                                Nicolas Refuse
                            </button>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="text-center">
                        <a href="/login" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt me-1"></i>
                            Connectez-vous pour voter
                        </a>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
        else if (Proposal.Status != ProposalStatus.Active)
        {
            <div class="alert alert-secondary text-center py-2">
                <small>
                    <i class="fas fa-info-circle me-1"></i>
                    Cette proposition est <strong>@GetStatusText(Proposal.Status).ToLower()</strong> et ne peut plus recevoir de votes.
                </small>
            </div>
        }

        <!-- Comments and Share -->
        <div class="d-flex justify-content-between align-items-center mt-3 pt-3 border-top">
            <a href="/proposal/@Proposal.Id" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-comments me-1"></i>
                @(CommentsCount ?? 0) commentaires
            </a>
            
            <div class="btn-group">
                <button class="btn btn-outline-secondary btn-sm" @onclick="ShareProposal">
                    <i class="fas fa-share me-1"></i>
                    Partager
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public ProposalDto Proposal { get; set; } = null!;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public int? CommentsCount { get; set; }
    [Parameter] public EventCallback<ProposalDto> OnProposalUpdated { get; set; }

    private VoteDto? userVote;
    private bool isVoting = false;
    private VoteType? pendingVoteType;
    private bool isToggling = false; // C# 13.0 - Status toggle state

    protected override async Task OnInitializedAsync()
    {
        if (ShowActions)
        {
            await LoadUserVote();
        }
    }

    private async Task LoadUserVote()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = GetUserIdFromClaims(authState.User);
            if (!string.IsNullOrEmpty(userId))
            {
                userVote = await VotingService.GetUserVoteAsync(userId, Proposal.Id);
            }
        }
    }

    private async Task CastVote(VoteType voteType)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var userId = GetUserIdFromClaims(authState.User);
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }

            isVoting = true;
            pendingVoteType = voteType;
            StateHasChanged();

            var success = await VotingService.CastVoteAsync(userId, Proposal.Id, voteType);
            
            if (success)
            {
                // Reload user vote to update button states
                await LoadUserVote();
                
                // Refresh proposal data to get updated vote counts
                var updatedProposal = await ProposalService.GetProposalDtoByIdAsync(Proposal.Id);
                if (updatedProposal != null)
                {
                    // Update the proposal reference with fresh data from the API
                    Proposal = updatedProposal;
                    
                    // Notify parent component if callback is provided
                    await OnProposalUpdated.InvokeAsync(updatedProposal);
                }
                
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Handle error - could show a toast notification
        }
        finally
        {
            isVoting = false;
            pendingVoteType = null;
            StateHasChanged();
        }
    }

    /// <summary>
    /// C# 13.0 - Toggle proposal status (SuperUser/Admin only) with modern pattern matching
    /// </summary>
    private async Task ToggleStatus(ProposalStatus newStatus)
    {
        try
        {
            isToggling = true;
            StateHasChanged();

            var updatedProposal = await ProposalService.ToggleProposalStatusAsync(Proposal.Id, newStatus);
            
            if (updatedProposal is not null)
            {
                // Update the proposal with new status
                Proposal = updatedProposal;
                
                // Notify parent component
                await OnProposalUpdated.InvokeAsync(updatedProposal);
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Error toggling proposal status: {ex.Message}");
        }
        finally
        {
            isToggling = false;
            StateHasChanged();
        }
    }

    private async Task ShareProposal()
    {
        var url = $"{Navigation.BaseUri}proposal/{Proposal.Id}";
        var text = $"Découvrez cette proposition sur Nicolas Qui Paie : {Proposal.Title}";
        
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.share", new
            {
                title = Proposal.Title,
                text = text,
                url = url
            });
        }
        catch
        {
            // Fallback to clipboard
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
        }
    }

    /// <summary>
    /// Helper method to extract user ID from JWT claims with multiple fallback options
    /// </summary>
    private static string? GetUserIdFromClaims(ClaimsPrincipal user)
    {
        // Try multiple claim types in order of preference:
        // 1. "sub" - Standard JWT subject claim
        // 2. ClaimTypes.NameIdentifier - ASP.NET Core standard
        // 3. JwtRegisteredClaimNames.Sub - JWT standard constant
        return user.FindFirst("sub")?.Value ?? 
               user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ??
               user.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
    }

    /// <summary>
    /// C# 13.0 - Get status badge CSS class using pattern matching
    /// </summary>
    private static string GetStatusBadgeClass(ProposalStatus status) => status switch
    {
        ProposalStatus.Active => "bg-success",
        ProposalStatus.Closed => "bg-warning text-dark",
        ProposalStatus.Archived => "bg-secondary",
        ProposalStatus.Draft => "bg-info",
        _ => "bg-light text-dark"
    };

    /// <summary>
    /// C# 13.0 - Get status icon using pattern matching
    /// </summary>
    private static string GetStatusIcon(ProposalStatus status) => status switch
    {
        ProposalStatus.Active => "fas fa-play",
        ProposalStatus.Closed => "fas fa-stop",
        ProposalStatus.Archived => "fas fa-archive",
        ProposalStatus.Draft => "fas fa-edit",
        _ => "fas fa-question"
    };

    /// <summary>
    /// C# 13.0 - Get status text using pattern matching
    /// </summary>
    private static string GetStatusText(ProposalStatus status) => status switch
    {
        ProposalStatus.Active => "Active",
        ProposalStatus.Closed => "Fermée",
        ProposalStatus.Archived => "Archivée",
        ProposalStatus.Draft => "Brouillon",
        _ => "Inconnu"
    };
}