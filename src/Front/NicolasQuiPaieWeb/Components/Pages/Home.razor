@page "/"
@using Microsoft.Extensions.Options
@inject ProposalService ProposalService
@inject AnalyticsService AnalyticsService
@inject ApiHealthService ApiHealthService
@inject ILogger<Home> Logger

<PageTitle>Nicolas Qui Paie - La Démocratie Souveraine Numérique</PageTitle>

<!-- Hero Section -->
<div class="hero-section bg-primary text-white py-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="display-4 fw-bold mb-4 text-nicolas-red">
                    Nicolas Qui Paie !
                </h1>
                <p class="lead mb-4">
                    La plateforme citoyenne où <strong>Nicolas</strong> décide vraiment ! 
                    Votez sur les dépenses publiques, proposez vos idées et participez à la démocratie souveraine numérique.
                </p>
                <div class="hero-stats mb-4">
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="stat-item">
                                <h3 class="fw-bold">@dashboardStats.TotalUsers.ToString("N0")</h3>
                                <small>Nicolas Inscrits</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-item">
                                <h3 class="fw-bold">@dashboardStats.TotalVotes.ToString("N0")</h3>
                                <small>Votes Exprimés</small>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="stat-item">
                                <h3 class="fw-bold">@dashboardStats.ActiveProposals</h3>
                                <small>Propositions Actives</small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <AuthorizeView>
                    <Authorized>
                        <!-- Utilisateur connecté -->
                        <div class="d-flex gap-3 justify-content-center">
                            <a href="/create-proposal" class="btn btn-warning btn-lg">
                                <i class="fas fa-lightbulb me-2"></i>Proposer une Idée
                            </a>
                            <a href="/proposals" class="btn btn-outline-light btn-lg">
                                <i class="fas fa-vote-yea me-2"></i>Voter sur les Propositions
                            </a>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <!-- Utilisateur non connecté -->
                        <div class="d-flex gap-3 justify-content-center">
                            <a href="/proposals" class="btn btn-warning btn-lg">
                                <i class="fas fa-vote-yea me-2"></i>Découvrir les Propositions
                            </a>
                            <a href="/register" class="btn btn-outline-light btn-lg">
                                <i class="fas fa-user-plus me-2"></i>Rejoindre les Nicolas
                            </a>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <div class="col-lg-6 text-center">
                <div class="hero-illustration">
                    <i class="fas fa-coins fa-10x opacity-75"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- API Status Indicator (if API is down) -->
@* @if (!isApiAvailable && !isLoading)
{
    <div class="container py-3">
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <i class="fas fa-exclamation-triangle me-3"></i>
            <div class="flex-grow-1">
                <strong>Mode dégradé</strong> - Connexion à l'API en cours de rétablissement.
                Certaines fonctionnalités peuvent être limitées.
            </div>
            <button class="btn btn-sm btn-outline-warning" @onclick="RetryConnection">
                <i class="fas fa-redo me-1"></i>Réessayer
            </button>
        </div>
    </div>
} *@

@if (isLoading)
{
    <div class="container py-5">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
            <p class="mt-3 text-muted">@loadingMessage</p>
        </div>
    </div>
}
else
{
    <!-- Ras-le-bol Meter -->
    <section class="py-5 bg-light">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card border-0 shadow-lg ras-le-bol-card">
                        <div class="card-body text-center py-5">
                            <h2 class="fw-bold mb-4">
                                <i class="fas fa-thermometer-three-quarters text-danger me-2"></i>
                                Baromètre du Ras-le-bol
                            </h2>
                            
                            <div class="ras-le-bol-meter mb-4">
                                <div class="meter-container position-relative">
                                    <div class="meter-background"></div>
                                    <div class="meter-fill" style="width: @(dashboardStats.RasLebolMeter)%"></div>
                                    <div class="meter-needle" style="left: @(dashboardStats.RasLebolMeter)%"></div>
                                </div>
                            </div>
                            
                            <h1 class="display-4 fw-bold text-danger">@Math.Round(dashboardStats.RasLebolMeter, 1)%</h1>
                            <p class="lead">des Nicolas expriment leur mécontentement</p>
                            
                            <a href="/analytics" class="btn btn-outline-primary">
                                <i class="fas fa-chart-line me-1"></i>Voir les Statistiques Complètes
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Trending Proposals -->
    @if (trendingProposals?.Any() == true)
    {
        <section class="py-5">
            <div class="container">
                <div class="row mb-4">
                    <div class="col-12 text-center">
                        <h2 class="fw-bold">
                            <i class="fas fa-fire text-warning me-2"></i>
                            Propositions Trending
                        </h2>
                        <p class="text-muted">Les sujets qui font débat chez les Nicolas</p>
                    </div>
                </div>
                
                <div class="row g-4">
                    @foreach (var proposal in trendingProposals.Take(4))
                    {
                        <div class="col-lg-6 col-md-6">
                            <div class="card border-0 shadow-sm h-100 proposal-card">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <span class="badge bg-primary">@proposal.CategoryName</span>
                                        <div class="proposal-stats">
                                            <small class="text-success me-2">
                                                <i class="fas fa-thumbs-up me-1"></i>@proposal.VotesFor
                                            </small>
                                            <small class="text-danger">
                                                <i class="fas fa-thumbs-down me-1"></i>@proposal.VotesAgainst
                                            </small>
                                        </div>
                                    </div>
                                    
                                    <h5 class="card-title">
                                        <a href="/proposal/@proposal.Id" class="text-decoration-none">
                                            @proposal.Title
                                        </a>
                                    </h5>
                                    
                                    <p class="card-text text-muted">
                                        @(proposal.Description.Length > 120 ? proposal.Description.Substring(0, 120) + "..." : proposal.Description)
                                    </p>
                                    
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted">
                                            <i class="fas fa-user-circle me-1"></i>
                                            Par @proposal.CreatedByDisplayName
                                        </small>
                                        <small class="text-muted">
                                            <i class="fas fa-clock me-1"></i>
                                            @proposal.CreatedAt.ToString("dd/MM/yyyy")
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="text-center mt-4">
                    <a href="/proposals" class="btn btn-primary btn-lg">
                        <i class="fas fa-vote-yea me-2"></i>Voir Toutes les Propositions
                    </a>
                </div>
            </div>
        </section>
    }
    else if (!hasLoadedData && isApiAvailable)
    {
        <!-- Show message when no trending proposals -->
        <section class="py-5">
            <div class="container text-center">
                <div class="card border-0 shadow-sm">
                    <div class="card-body py-5">
                        <i class="fas fa-rocket fa-3x text-muted mb-3"></i>
                        <h3>La révolution Nicolas commence !</h3>
                        <p class="text-muted">Soyez parmi les premiers à proposer et voter.</p>
                        <a href="/proposals" class="btn btn-primary">Explorer les propositions</a>
                    </div>
                </div>
            </div>
        </section>
    }

    <!-- Call to Action -->
    <section class="py-5 bg-light">
        <div class="container text-center">
            <h2 class="fw-bold mb-4">Rejoignez la Révolution Nicolas !</h2>
            <p class="lead text-muted mb-4">
                Participez à la première démocratie souveraine numérique où chaque Nicolas compte.
            </p>
            
            <AuthorizeView>
                <Authorized>
                    <a href="/create-proposal" class="btn btn-primary btn-lg me-3">
                        <i class="fas fa-lightbulb me-2"></i>Créer une Proposition
                    </a>
                    <a href="/trending" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-fire me-2"></i>Voir les Trending
                    </a>
                </Authorized>
                <NotAuthorized>
                    <a href="/register" class="btn btn-primary btn-lg me-3">
                        <i class="fas fa-user-plus me-2"></i>Créer un Compte
                    </a>
                    <a href="/login" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-sign-in-alt me-2"></i>Se Connecter
                    </a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </section>
}

@code {
    private IEnumerable<ProposalDto> trendingProposals = [];
    private DashboardStatsDto dashboardStats = new();
    private bool isLoading = true;
    private bool isApiAvailable = true;
    private bool hasLoadedData = false;
    private string loadingMessage = "Chargement des données...";

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        loadingMessage = "Vérification de la connexion API...";
        StateHasChanged();
        
        try
        {
            // Check API availability first
            isApiAvailable = await ApiHealthService.IsApiAvailableAsync();

            if (!isApiAvailable)
            {
                Logger.LogWarning("API not available or readonly, using fallback data");
                await LoadFallbackData();
                return;
            }

            loadingMessage = "Chargement des propositions trending...";
            StateHasChanged();
            
            trendingProposals = await ProposalService.GetTrendingProposalsAsync(4);
            
            loadingMessage = "Chargement des statistiques...";
            StateHasChanged();
            
            dashboardStats = await AnalyticsService.GetDashboardStatsAsync();
            hasLoadedData = true;
            
            Logger.LogInformation("Dashboard data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
            isApiAvailable = false;
            await LoadFallbackData();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadFallbackData()
    {
        Logger.LogInformation("Loading fallback data for offline mode");
        
        // Provide demo/fallback data when API is not available
        trendingProposals = GetDemoProposals();
        dashboardStats = new DashboardStatsDto
        {
            TotalUsers = 1337,
            TotalVotes = 9999,
            ActiveProposals = 42,
            RasLebolMeter = 75.5,
            TotalComments = 2580
        };
        
        hasLoadedData = false; // Indicate this is fallback data
        await Task.CompletedTask;
    }

    private async Task RetryConnection()
    {
        Logger.LogInformation("Retrying API connection...");
        await LoadDashboardData();
    }

    private static IEnumerable<ProposalDto> GetDemoProposals()
    {
        return 
        [
            new ProposalDto
            {
                Id = 1,
                Title = "Supprimer la redevance audiovisuelle",
                Description = "Proposition de suppression définitive de la redevance audiovisuelle pour alléger la fiscalité des ménages français.",
                CategoryName = "Fiscalité",
                CategoryColor = "#dc3545",
                VotesFor = 1250,
                VotesAgainst = 340,
                CreatedByDisplayName = "Nicolas Patriote",
                CreatedAt = DateTime.UtcNow.AddDays(-2)
            },
            new ProposalDto
            {
                Id = 2,
                Title = "Réduire les dépenses de communication gouvernementale",
                Description = "Limiter le budget communication des ministères à 50% de leur montant actuel pour réduire les dépenses publiques.",
                CategoryName = "Dépenses Publiques",
                CategoryColor = "#0d6efd",
                VotesFor = 980,
                VotesAgainst = 120,
                CreatedByDisplayName = "Nicolas Économe",
                CreatedAt = DateTime.UtcNow.AddDays(-1)
            }
        ];
    }
}
