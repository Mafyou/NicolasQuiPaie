@page "/analytics"
@using NicolasQuiPaieData.DTOs
@using NicolasQuiPaieWeb.Services
@inject IAnalyticsService AnalyticsService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Analytics - Nicolas Qui Paie</PageTitle>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 text-primary">
                    <i class="fas fa-chart-line me-2"></i>
                    Analytics & Statistiques
                </h1>
                <div class="text-muted">
                    <i class="fas fa-clock me-1"></i>
                    Dernière mise à jour : @DateTime.Now.ToString("HH:mm")
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
                <p class="mt-3 text-muted">Chargement des statistiques...</p>
            </div>
        </div>
    }
    else
    {
        <!-- KPI Cards -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Utilisateurs Actifs</h6>
                                <h2 class="mb-0">@stats?.ActiveUsers.ToString("N0")</h2>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-users fa-2x opacity-75"></i>
                            </div>
                        </div>
                        <small class="opacity-75">@stats?.TotalUsers.ToString("N0") au total</small>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card bg-success text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Propositions</h6>
                                <h2 class="mb-0">@stats?.ActiveProposals.ToString("N0")</h2>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-lightbulb fa-2x opacity-75"></i>
                            </div>
                        </div>
                        <small class="opacity-75">@stats?.TotalProposals.ToString("N0") au total</small>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card bg-info text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Votes Exprimés</h6>
                                <h2 class="mb-0">@stats?.TotalVotes.ToString("N0")</h2>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-vote-yea fa-2x opacity-75"></i>
                            </div>
                        </div>
                        <small class="opacity-75">Participation démocratique</small>
                    </div>
                </div>
            </div>

            <div class="col-md-3">
                <div class="card bg-warning text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Ras-le-bol Mètre</h6>
                                <h2 class="mb-0">@((int)stats?.RasLebolMeter)%</h2>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-thermometer-half fa-2x opacity-75"></i>
                            </div>
                        </div>
                        <small class="opacity-75">Niveau de frustration</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row g-4 mb-4">
            <div class="col-lg-8">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chart-area me-2"></i>
                            Tendances des Votes (30 derniers jours)
                        </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="voteTrendsChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-medal me-2"></i>
                            Distribution des Niveaux de Contribution
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (stats?.NicolasLevelDistribution?.Any() == true)
                        {
                            @foreach (var level in stats.NicolasLevelDistribution)
                            {
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="fw-medium">@GetNicolasLevelLabel(level.Level)</span>
                                        <span class="badge @GetLevelColorClass(level.Level)">@level.Count.ToString("N0")</span>
                                    </div>
                                    <div class="progress" style="height: 10px; background-color: #e9ecef;">
                                        <div class="progress-bar @GetLevelColorClass(level.Level)" 
                                             style="width: @level.Percentage.ToString("F1", System.Globalization.CultureInfo.InvariantCulture)%; min-width: 2px;"></div>
                                    </div>
                                    <small class="text-muted">@level.Percentage.ToString("F1")%</small>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-chart-pie fa-3x mb-3"></i>
                                <p>Aucune donnée disponible</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Top Categories & Contributors -->
        <div class="row g-4 mb-4">
            <div class="col-lg-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-fire me-2"></i>
                            Catégories les Plus Populaires
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (stats?.TopCategories?.Any() == true)
                        {
                            @foreach (var category in stats.TopCategories.Take(6))
                            {
                                <div class="d-flex align-items-center mb-3">
                                    <div class="badge rounded-pill me-3" style="background-color: @category.CategoryColor;">
                                        <i class="@category.CategoryIcon"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-medium">@category.CategoryName</div>
                                        <div class="progress mt-1" style="height: 8px; background-color: #e9ecef;">
                                            <div class="progress-bar" 
                                                 style="width: @GetCategoryPercentage(category.VoteCount).ToString("F1", System.Globalization.CultureInfo.InvariantCulture)%; background-color: @category.CategoryColor; min-width: 2px;"></div>
                                        </div>
                                        <small class="text-muted">@GetCategoryPercentage(category.VoteCount).ToString("F1")% du maximum</small>
                                    </div>
                                    <div class="text-end ms-3">
                                        <div class="fw-bold">@category.VoteCount.ToString("N0")</div>
                                        <small class="text-muted">votes</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-folder-open fa-3x mb-3"></i>
                                <p>Aucune donnée disponible</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-trophy me-2"></i>
                            Top Contributeurs
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (topContributors?.TopProposers?.Any() == true)
                        {
                            @foreach (var contributor in topContributors.TopProposers.Take(5))
                            {
                                <div class="d-flex align-items-center mb-3">
                                    <div class="me-3">
                                        @GetNicolasLevelLabel(contributor.UserContributionLevel)
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-medium">@contributor.UserDisplayName</div>
                                        <small class="text-muted">@contributor.ReputationScore pts de réputation</small>
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-bold text-primary">@contributor.ContributionCount</div>
                                        <small class="text-muted">contributions</small>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <p>Aucune donnée disponible</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Trending Proposals -->
        @if (trendingProposals?.Any() == true)
        {
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-trending-up me-2"></i>
                                Propositions Tendances
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                @foreach (var proposal in trendingProposals.Take(3))
                                {
                                    <div class="col-md-4">
                                        <div class="card border-primary">
                                            <div class="card-body">
                                                <h6 class="card-title">@proposal.Title</h6>
                                                <p class="card-text text-muted small">
                                                    @(proposal.Description.Length > 100 ? 
                                                      proposal.Description.Substring(0, 100) + "..." : 
                                                      proposal.Description)
                                                </p>
                                                <div class="d-flex justify-content-between">
                                                    <small class="text-success">
                                                        <i class="fas fa-thumbs-up me-1"></i>
                                                        @proposal.VotesFor
                                                    </small>
                                                    <small class="text-danger">
                                                        <i class="fas fa-thumbs-down me-1"></i>
                                                        @proposal.VotesAgainst
                                                    </small>
                                                    <small class="text-info">
                                                        <i class="fas fa-eye me-1"></i>
                                                        @proposal.ViewsCount
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private DashboardStatsDto? stats;
    private IEnumerable<ProposalDto>? trendingProposals;
    private TopContributorsDto? topContributors;
    private bool isLoading = true;
    private IJSObjectReference? chartModule;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InitializeCharts();
    }

    private async Task LoadData()
    {
        try
        {
            stats = await AnalyticsService.GetDashboardStatsAsync();
            var trendingProposalsList = await AnalyticsService.GetTrendingProposalsAsync();
            trendingProposals = trendingProposalsList.Select(tp => tp.Proposal);
            var topContributorsList = await AnalyticsService.GetTopContributorsAsync();
            topContributors = new TopContributorsDto
            {
                TopProposers = topContributorsList.Select(tc => new UserContributionDto
                {
                    UserId = tc.UserId,
                    UserDisplayName = tc.UserDisplayName,
                    UserContributionLevel = tc.UserContributionLevel
                }).ToList()
            };

            if (stats?.TopCategories?.Any() == true)
            {
                var maxVotes = stats.TopCategories.Max(c => c.VoteCount);
                foreach (var cat in stats.TopCategories)
                {
                    var percentage = maxVotes > 0 ? (double)cat.VoteCount / maxVotes * 100 : 0;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] LoadData failed: {ex.Message}");
            // Log error and show default values
            stats = new DashboardStatsDto();
            trendingProposals = [];
            topContributors = new TopContributorsDto();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task InitializeCharts()
    {
        try
        {
            chartModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/charts.js");
            
            if (stats?.DailyVoteTrends?.Any() == true)
            {
                await chartModule.InvokeVoidAsync("initializeVoteTrendsChart", 
                    stats.DailyVoteTrends.Select(d => d.Date.ToString("dd/MM")).ToArray(),
                    stats.DailyVoteTrends.Select(d => d.VotesFor).ToArray(),
                    stats.DailyVoteTrends.Select(d => d.VotesAgainst).ToArray());
            }
        }
        catch (Exception)
        {
            // Charts failed to load, continue without them
        }
    }

    private string GetNicolasLevelLabel(NicolasQuiPaieData.DTOs.ContributionLevel level)
    {
        return level switch
        {
            NicolasQuiPaieData.DTOs.ContributionLevel.PetitNicolas => "🥉 Petit Nicolas",
            NicolasQuiPaieData.DTOs.ContributionLevel.GrosMoyenNicolas => "🥈 Moyen Nicolas",
            NicolasQuiPaieData.DTOs.ContributionLevel.GrosNicolas => "🥇 Gros Nicolas",
            NicolasQuiPaieData.DTOs.ContributionLevel.NicolasSupreme => "👑 Nicolas Suprême",
            _ => "🥉 Nicolas"
        };
    }

    private string GetLevelColor(NicolasQuiPaieData.DTOs.ContributionLevel level)
    {
        return level switch
        {
            NicolasQuiPaieData.DTOs.ContributionLevel.PetitNicolas => "bg-secondary",
            NicolasQuiPaieData.DTOs.ContributionLevel.GrosMoyenNicolas => "bg-primary",
            NicolasQuiPaieData.DTOs.ContributionLevel.GrosNicolas => "bg-info",
            NicolasQuiPaieData.DTOs.ContributionLevel.NicolasSupreme => "bg-warning",
            _ => "bg-primary"
        };
    }

    private double GetCategoryPercentage(int voteCount)
    {
        if (stats?.TopCategories?.Any() != true) return 0;
        var maxVotes = stats.TopCategories.Max(c => c.VoteCount);
        return maxVotes > 0 ? (double)voteCount / maxVotes * 100 : 0;
    }

    private string GetLevelColorClass(ContributionLevel level)
    {
        return level switch
        {
            ContributionLevel.PetitNicolas => "bg-secondary",
            ContributionLevel.GrosMoyenNicolas => "bg-primary",
            ContributionLevel.GrosNicolas => "bg-info",
            ContributionLevel.NicolasSupreme => "bg-warning",
            _ => "bg-secondary"
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (chartModule != null)
        {
            await chartModule.DisposeAsync();
            chartModule = null;
        }
    }
}