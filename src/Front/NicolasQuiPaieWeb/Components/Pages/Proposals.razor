@page "/proposals"
@inject ProposalService ProposalService
@inject NavigationManager Navigation
@inject ILogger<Proposals> Logger

<PageTitle>Propositions - Nicolas Qui Paie</PageTitle>

<div class="container">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="fw-bold">
                <i class="fas fa-vote-yea text-primary me-2"></i>
                Propositions
            </h1>
            <p class="text-muted">Découvrez et votez sur les propositions de la communauté Nicolas</p>
        </div>
        <div class="col-md-4 text-end">
            <a href="/create-proposal" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Nouvelle Proposition
            </a>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Catégorie</label>
                            <select class="form-select" @bind="selectedCategory" @bind:after="OnFilterChanged">
                                <option value="">Toutes les catégories</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Recherche</label>
                            <input type="text" class="form-control" placeholder="Rechercher..." @bind="searchTerm" @onkeyup="OnSearchChanged" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Tri</label>
                            <select class="form-select" @bind="sortBy" @bind:after="OnFilterChanged">
                                <option value="recent">Plus récentes</option>
                                <option value="popular">Plus populaires</option>
                                <option value="controversial">Plus débattues</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Proposals List -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (proposals?.Any() == true)
    {
        <div class="row g-4">
            @foreach (var proposal in proposals)
            {
                <div class="col-12">
                    <NicolasQuiPaieWeb.Components.Shared.ProposalCard Proposal="proposal" ShowActions="true" />
                </div>
            }
        </div>

        <!-- Load More Button -->
        @if (hasMoreProposals)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-primary" @onclick="LoadMoreProposals" disabled="@isLoadingMore">
                    @if (isLoadingMore)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Charger plus de propositions
                </button>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-search fa-3x text-muted mb-3"></i>
            <h4 class="text-muted">Aucune proposition trouvée</h4>
            <p class="text-muted">Ajustez vos filtres ou créez la première proposition !</p>
            <a href="/create-proposal" class="btn btn-primary mt-3">
                <i class="fas fa-plus me-2"></i>Créer une Proposition
            </a>
        </div>
    }
</div>

@code {
    private IEnumerable<ProposalDto> proposals = new List<ProposalDto>();
    private IEnumerable<CategoryDto> categories = new List<CategoryDto>();
    private string? selectedCategory = "";
    private string searchTerm = "";
    private string sortBy = "recent";
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private bool hasMoreProposals = true;
    private int currentPage = 0;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProposals();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await ProposalService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading categories");
            categories = new List<CategoryDto>();
        }
    }

    private async Task LoadProposals(bool append = false)
    {
        try
        {
            if (!append)
            {
                isLoading = true;
                currentPage = 0;
            }
            else
            {
                isLoadingMore = true;
            }

            // Convert empty string to null for category filter
            var categoryFilter = string.IsNullOrWhiteSpace(selectedCategory) ? null : selectedCategory;
            var searchFilter = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm;

            var newProposals = new List<ProposalDto>();

            if (sortBy == "recent")
            {
                newProposals = [.. await ProposalService.GetRecentProposalsAsync(
                    skip: currentPage * PageSize,
                    take: PageSize,
                    category: categoryFilter,
                    search: searchFilter
                )];
            }
            else if (sortBy == "popular")
            {
                newProposals = [.. await ProposalService.GetPopularProposalsAsync(
                    skip: currentPage * PageSize,
                    take: PageSize,
                    category: categoryFilter,
                    search: searchFilter
                )];
            }
            else if (sortBy == "controversial")
            {
                newProposals = [.. await ProposalService.GetControversialProposalsAsync(
                    skip: currentPage * PageSize,
                    take: PageSize,
                    category: categoryFilter,
                    search: searchFilter
                )];
            }


            if (append)
            {
                proposals = proposals.Concat(newProposals);
            }
            else
            {
                proposals = newProposals;
            }

            hasMoreProposals = newProposals.Count() == PageSize;
            currentPage++;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading proposals");
            if (!append)
            {
                proposals = new List<ProposalDto>();
            }
        }
        finally
        {
            isLoading = false;
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChanged()
    {
        await LoadProposals();
    }

    private async Task OnSearchChanged(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadProposals();
        }
    }

    private async Task LoadMoreProposals()
    {
        await LoadProposals(append: true);
    }
}