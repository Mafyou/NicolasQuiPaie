@page "/profile"
@using NicolasQuiPaieData.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Mon Profil - Nicolas Qui Paie</PageTitle>

<div class="container py-4">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                    <p class="mt-3 text-muted">Chargement de votre profil...</p>
                </div>
            }
            else if (currentUser is null)
            {
                <div class="alert alert-warning text-center">
                    <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                    <h4>Profil non trouvé</h4>
                    <p>Impossible de charger les informations de votre profil.</p>
                    <button class="btn btn-primary" @onclick="RetryLoadProfile">
                        <i class="fas fa-refresh me-2"></i>Réessayer
                    </button>
                </div>
            }
            else
            {
                <!-- Profile Header -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-primary text-white">
                        <div class="d-flex align-items-center">
                            <div class="avatar-lg bg-white text-primary rounded-circle d-flex align-items-center justify-content-center me-3"
                                 style="width: 60px; height: 60px;">
                                <i class="fas fa-user fa-2x"></i>
                            </div>
                            <div>
                                <h4 class="mb-1">@currentUser.DisplayName</h4>
                                <p class="mb-0 opacity-75">@currentUser.Email</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h5 class="text-primary mb-1">@GetContributionLevelDisplay(currentUser.ContributionLevel)</h5>
                                    <small class="text-muted">Badge Nicolas</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h5 class="text-warning mb-1">@currentUser.ReputationScore</h5>
                                    <small class="text-muted">Points de Réputation</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h5 class="text-success mb-1">@(currentUser.IsVerified ? "Vérifié" : "Non vérifié")</h5>
                                    <small class="text-muted">Statut</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <h5 class="text-info mb-1">@currentUser.CreatedAt.ToString("dd/MM/yyyy")</h5>
                                <small class="text-muted">Membre depuis</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Navigation Tabs -->
                <ul class="nav nav-pills nav-fill mb-4" id="profileTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="info-tab" data-bs-toggle="pill" data-bs-target="#info" type="button" role="tab">
                            <i class="fas fa-user me-2"></i>Informations
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="stats-tab" data-bs-toggle="pill" data-bs-target="#stats" type="button" role="tab">
                            <i class="fas fa-chart-bar me-2"></i>Statistiques
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="badges-tab" data-bs-toggle="pill" data-bs-target="#badges" type="button" role="tab">
                            <i class="fas fa-medal me-2"></i>Badges
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="profileTabsContent">
                    
                    <!-- Personal Information Tab -->
                    <div class="tab-pane fade show active" id="info" role="tabpanel">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-edit me-2"></i>Modifier le Profil
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(updateMessage))
                                {
                                    <div class="alert alert-success alert-dismissible fade show">
                                        <i class="fas fa-check-circle me-2"></i>@updateMessage
                                    </div>
                                }

                                <form @onsubmit="UpdateProfile" @onsubmit:preventDefault="true">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="displayName" class="form-label">Nom d'affichage</label>
                                            <input type="text" class="form-control" id="displayName" @bind="editDisplayName" 
                                                   maxlength="50" placeholder="Votre nom d'affichage">
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="email" class="form-label">Email</label>
                                            <input type="email" class="form-control" id="email" value="@currentUser.Email" readonly>
                                            <div class="form-text">L'email ne peut pas être modifié ici.</div>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="bio" class="form-label">Biographie</label>
                                        <textarea class="form-control" id="bio" @bind="editBio" rows="4" 
                                                 maxlength="500" placeholder="Parlez-nous de vous... (optionnel)"></textarea>
                                    </div>

                                    <div class="d-flex justify-content-end">
                                        <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                                            @if (isUpdating)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2"></span>
                                            }
                                            <i class="fas fa-save me-2"></i>Sauvegarder
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!-- Statistics Tab -->
                    <div class="tab-pane fade" id="stats" role="tabpanel">
                        <div class="row g-4">
                            <div class="col-md-6">
                                <div class="card border-0 shadow-sm text-center">
                                    <div class="card-body">
                                        <i class="fas fa-lightbulb fa-3x text-warning mb-3"></i>
                                        <h3 class="text-primary">@(userStats?.ProposalsCount ?? 0)</h3>
                                        <p class="text-muted">Propositions Créées</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 shadow-sm text-center">
                                    <div class="card-body">
                                        <i class="fas fa-vote-yea fa-3x text-info mb-3"></i>
                                        <h3 class="text-primary">@(userStats?.VotesCount ?? 0)</h3>
                                        <p class="text-muted">Votes Exprimés</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 shadow-sm text-center">
                                    <div class="card-body">
                                        <i class="fas fa-comments fa-3x text-success mb-3"></i>
                                        <h3 class="text-primary">@(userStats?.CommentsCount ?? 0)</h3>
                                        <p class="text-muted">Commentaires Publiés</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-0 shadow-sm text-center">
                                    <div class="card-body">
                                        <i class="fas fa-star fa-3x text-warning mb-3"></i>
                                        <h3 class="text-primary">@currentUser.ReputationScore</h3>
                                        <p class="text-muted">Réputation Totale</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="text-center mt-4">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Les statistiques sont mises à jour en temps réel
                            </small>
                        </div>
                    </div>

                    <!-- Badges Tab -->
                    <div class="tab-pane fade" id="badges" role="tabpanel">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="fas fa-trophy me-2"></i>Système de Badges Nicolas
                                </h5>
                                <button class="btn btn-sm btn-outline-primary" @onclick="RefreshBadgeProgress" disabled="@isRefreshingBadge">
                                    @if (isRefreshingBadge)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1"></span>
                                    }
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                            </div>
                            <div class="card-body">
                                
                                <!-- Current Badge -->
                                <div class="text-center mb-4">
                                    <div class="badge-display p-4 border rounded bg-light">
                                        <div class="display-4 mb-3">@GetContributionLevelIcon(currentUser.ContributionLevel)</div>
                                        <h4 class="text-primary">@GetContributionLevelDisplay(currentUser.ContributionLevel)</h4>
                                        <p class="text-muted">Votre badge actuel</p>
                                    </div>
                                </div>

                                <!-- Badge Progression -->
                                <div class="mb-4">
                                    <h6>Progression vers le prochain niveau</h6>
                                    <div class="progress mb-2" style="height: 8px;">
                                        <div class="progress-bar bg-primary" style="width: @GetProgressToNextLevel()%"></div>
                                    </div>
                                    <small class="text-muted">
                                        @currentUser.ReputationScore / @GetNextLevelRequirement() points de réputation
                                    </small>
                                </div>

                                <!-- All Badges Overview -->
                                <div class="row g-3">
                                    @foreach (var level in Enum.GetValues<ContributionLevel>())
                                    {
                                        var isCurrentLevel = level == currentUser.ContributionLevel;
                                        var isUnlocked = currentUser.ContributionLevel >= level;
                                        
                                        <div class="col-md-6">
                                            <div class="card @(isCurrentLevel ? "border-primary" : isUnlocked ? "border-success" : "border-secondary opacity-50")">
                                                <div class="card-body text-center p-3">
                                                    <div class="h4 mb-2">@GetContributionLevelIcon(level)</div>
                                                    <h6 class="mb-1">@GetContributionLevelDisplay(level)</h6>
                                                    <small class="text-muted">@GetContributionLevelDescription(level)</small>
                                                    @if (isCurrentLevel)
                                                    {
                                                        <div class="mt-2">
                                                            <span class="badge bg-primary">Actuel</span>
                                                        </div>
                                                    }
                                                    else if (isUnlocked)
                                                    {
                                                        <div class="mt-2">
                                                            <span class="badge bg-success">Débloqué</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="mt-2">
                                                            <span class="badge bg-secondary">Verrouillé</span>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <!-- Information about contribution system -->
                                <div class="alert alert-info mt-4">
                                    <div class="d-flex">
                                        <i class="fas fa-info-circle fa-2x me-3"></i>
                                        <div>
                                            <h6 class="alert-heading">Comment progresser ?</h6>
                                            <p class="mb-2">Votre niveau de contribution augmente avec :</p>
                                            <ul class="mb-0">
                                                <li>🗳️ <strong>Voter sur les propositions</strong> (+1-2 points)</li>
                                                <li>💡 <strong>Créer des propositions</strong> (+5-10 points)</li>
                                                <li>💬 <strong>Commenter constructivement</strong> (+1 point)</li>
                                                <li>👍 <strong>Recevoir des likes</strong> (points bonus)</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private UserDto? currentUser;
    private UserStatsDto? userStats;
    
    // Edit fields
    private string editDisplayName = "";
    private string editBio = "";
    
    // Component state
    private bool isLoading = true;
    private bool isUpdating = false;
    private bool isRefreshingBadge = false;
    private string updateMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task RetryLoadProfile()
    {
        currentUser = null;
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                // Extract user information from JWT claims
                currentUser = new UserDto
                {
                    Id = authState.User.FindFirst("sub")?.Value ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "",
                    Email = authState.User.FindFirst("email")?.Value ?? authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
                    DisplayName = authState.User.FindFirst("DisplayName")?.Value ?? authState.User.Identity?.Name ?? "Nicolas",
                    ContributionLevel = Enum.TryParse<ContributionLevel>(authState.User.FindFirst("ContributionLevel")?.Value, out var level) ? level : ContributionLevel.PetitNicolas,
                    ReputationScore = int.TryParse(authState.User.FindFirst("ReputationScore")?.Value, out var score) ? score : 0,
                    IsVerified = bool.TryParse(authState.User.FindFirst("IsVerified")?.Value, out var verified) && verified,
                    CreatedAt = DateTime.TryParse(authState.User.FindFirst("CreatedAt")?.Value, out var created) ? created : DateTime.UtcNow
                };

                editDisplayName = currentUser.DisplayName ?? "";
                editBio = ""; // Will be loaded from API in future

                // Load user stats (placeholder for now - will be replaced with API calls)
                userStats = new UserStatsDto
                {
                    ProposalsCount = 0, // TODO: Load from API
                    VotesCount = 0,     // TODO: Load from API
                    CommentsCount = 0,  // TODO: Load from API
                    ReputationScore = currentUser.ReputationScore
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement du profil: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateProfile()
    {
        if (currentUser == null) return;

        isUpdating = true;
        updateMessage = "";
        
        try
        {
            // TODO: Call API to update profile when endpoint is available
            // For now, update the record using 'with' expression
            currentUser = currentUser with { DisplayName = editDisplayName?.Trim() };
            
            updateMessage = "Profil mis à jour avec succès !";
            _ = Task.Delay(3000).ContinueWith(_ => 
            {
                updateMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            updateMessage = $"Erreur lors de la mise à jour: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
            StateHasChanged();
        }
    }

    private async Task RefreshBadgeProgress()
    {
        isRefreshingBadge = true;
        StateHasChanged();
        
        // TODO: Call API to refresh badge progression when available
        await Task.Delay(1000);
        
        isRefreshingBadge = false;
        StateHasChanged();
    }

    private string GetContributionLevelDisplay(ContributionLevel level) => level switch
    {
        ContributionLevel.PetitNicolas => "🥉 Petit Nicolas",
        ContributionLevel.GrosMoyenNicolas => "🥈 Moyen Nicolas",
        ContributionLevel.GrosNicolas => "🥇 Gros Nicolas", 
        ContributionLevel.NicolasSupreme => "👑 Nicolas Suprême",
        _ => "🥉 Petit Nicolas"
    };

    private string GetContributionLevelIcon(ContributionLevel level) => level switch
    {
        ContributionLevel.PetitNicolas => "🥉",
        ContributionLevel.GrosMoyenNicolas => "🥈",
        ContributionLevel.GrosNicolas => "🥇",
        ContributionLevel.NicolasSupreme => "👑",
        _ => "🥉"
    };

    private string GetContributionLevelDescription(ContributionLevel level) => level switch
    {
        ContributionLevel.PetitNicolas => "Nouveau contributeur (0-99 points)",
        ContributionLevel.GrosMoyenNicolas => "Contributeur actif (100-499 points)",
        ContributionLevel.GrosNicolas => "Contributeur expérimenté (500-999 points)",
        ContributionLevel.NicolasSupreme => "Expert de la communauté (1000+ points)",
        _ => "Contributeur Nicolas"
    };

    private double GetProgressToNextLevel()
    {
        if (currentUser == null) return 0;

        return currentUser.ContributionLevel switch
        {
            ContributionLevel.PetitNicolas => (double)currentUser.ReputationScore / 100 * 100,
            ContributionLevel.GrosMoyenNicolas => (double)(currentUser.ReputationScore - 100) / 400 * 100,
            ContributionLevel.GrosNicolas => (double)(currentUser.ReputationScore - 500) / 500 * 100,
            ContributionLevel.NicolasSupreme => 100, // Max level
            _ => 0
        };
    }

    private int GetNextLevelRequirement()
    {
        if (currentUser == null) return 100;

        return currentUser.ContributionLevel switch
        {
            ContributionLevel.PetitNicolas => 100,
            ContributionLevel.GrosMoyenNicolas => 500,
            ContributionLevel.GrosNicolas => 1000,
            ContributionLevel.NicolasSupreme => 1000, // Max level
            _ => 100
        };
    }
}